loki:
  image:
    repository: ghcr.io/k8s-at-home/loki
  serviceMonitor:
    enabled: true
  config:
    storage_config:
      aws:
        s3: s3://minioadmin:minioadmin@192.168.1.91:9010/loki
        s3forcepathstyle: true
      boltdb_shipper:
        active_index_directory: /data/loki/index
        cache_location: /data/loki/index_cache
        resync_interval: 5s
        shared_store: s3
    ruler:
      storage:
        type: local
        local:
          directory: /rules
      rule_path: /tmp/scratch
      alertmanager_url: http://prometheus-alertmanager:9093
      ring:
        kvstore:
          store: inmemory
      enable_api: true
  alerting_groups:
    - name: test
      rules:
        - alert: TestAlert
          expr: |
            1 + 1
          for: 1m
          labels:
            severity: critical
            category: logs
          annotations:
            summary: "Uptime-Kuma detected an outage"
    #
    # radarr read-only
    #
    - name: zigbee2mqtt
      rules:
        - alert: ZigbeeUnableToReachMQTT
          expr: |
            sum(count_over_time({app="radarr"} |= "ReadOnly"[1m])) > 0
          for: 10s
          labels:
            severity: critical
            category: logs
          annotations:
            summary: "Radarr's volume is read-only"
  #   #
  #   # zwavejs2mqtt
  #   #
  #   - name: zwavejs2mqtt
  #     rules:
  #       - alert: ZwaveUnableToReachMQTT
  #         expr: |
  #           sum(count_over_time({app="zwavejs2mqtt"} |= "Error while connecting MQTT"[2m])) > 0
  #         for: 10s
  #         labels:
  #           severity: critical
  #           category: logs
  #         annotations:
  #           summary: "Zwavejs2mqtt is unable to reach MQTT"
  #   #
  #   # frigate
  #   #
  #   - name: frigate
  #     rules:
  #       - alert: FrigateUnableToReachMQTT
  #         expr: |
  #           sum(count_over_time({app="frigate"} |= "Unable to connect to MQTT server"[2m])) > 0
  #         for: 10s
  #         labels:
  #           severity: critical
  #           category: logs
  #         annotations:
  #           summary: "Frigate is unable to reach MQTT"
  #   #
  #   # *arr applications
  #   #
  #   - name: arr
  #     rules:
  #       - alert: ArrDatabaseIsLocked
  #         expr: |
  #           sum by (app) (count_over_time({app=~".*arr"} |= "database is locked"[2m])) > 0
  #         for: 10s
  #         labels:
  #           severity: critical
  #           category: logs
  #         annotations:
  #           summary: "{{$value}} is experiencing locked database issues"
